"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

const fs = require('fs');

const os = require('os');

const path = require('path');

const debug = require('debug')('preview-email');

const moment = require('moment');

const nodemailer = require('nodemailer');

const open = require('open');

const pify = require('pify');

const pug = require('pug');

const uuid = require('uuid');

const writeFile = pify(fs.writeFile);
const transport = nodemailer.createTransport({
  jsonTransport: true
});
const templateFilePath = path.join(__dirname, '..', 'template.pug');
const renderFilePromise = pify(pug.renderFile);

const previewEmail = async (message, options) => {
  options = (0, _objectSpread2.default)({
    dir: os.tmpdir(),
    id: uuid.v4(),
    open: {
      wait: false
    },
    template: templateFilePath
  }, options);
  debug('message', message, 'options', options);
  if (typeof message !== 'object') throw new Error('Message argument is required');
  const res = await transport.sendMail(message);
  res.message = JSON.parse(res.message);
  const html = await renderFilePromise(options.template, Object.assign(res.message, {
    cache: true,
    pretty: true,
    moment
  }));
  const filePath = `${options.dir}/${options.id}.html`;
  debug('filePath', filePath);
  await writeFile(filePath, html);
  if (options.open) await open(filePath, options.open);
  return `file://${filePath}`;
};

module.exports = previewEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJvcyIsInBhdGgiLCJkZWJ1ZyIsIm1vbWVudCIsIm5vZGVtYWlsZXIiLCJvcGVuIiwicGlmeSIsInB1ZyIsInV1aWQiLCJ3cml0ZUZpbGUiLCJ0cmFuc3BvcnQiLCJjcmVhdGVUcmFuc3BvcnQiLCJqc29uVHJhbnNwb3J0IiwidGVtcGxhdGVGaWxlUGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJyZW5kZXJGaWxlUHJvbWlzZSIsInJlbmRlckZpbGUiLCJwcmV2aWV3RW1haWwiLCJtZXNzYWdlIiwib3B0aW9ucyIsImRpciIsInRtcGRpciIsImlkIiwidjQiLCJ3YWl0IiwidGVtcGxhdGUiLCJFcnJvciIsInJlcyIsInNlbmRNYWlsIiwiSlNPTiIsInBhcnNlIiwiaHRtbCIsIk9iamVjdCIsImFzc2lnbiIsImNhY2hlIiwicHJldHR5IiwiZmlsZVBhdGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQVAsQ0FBaUIsZUFBakIsQ0FBZDs7QUFDQSxNQUFNSSxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1LLFVBQVUsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBMUI7O0FBQ0EsTUFBTU0sSUFBSSxHQUFHTixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNTyxJQUFJLEdBQUdQLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1RLEdBQUcsR0FBR1IsT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0EsTUFBTVMsSUFBSSxHQUFHVCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFFQSxNQUFNVSxTQUFTLEdBQUdILElBQUksQ0FBQ1IsRUFBRSxDQUFDVyxTQUFKLENBQXRCO0FBRUEsTUFBTUMsU0FBUyxHQUFHTixVQUFVLENBQUNPLGVBQVgsQ0FBMkI7QUFDM0NDLEVBQUFBLGFBQWEsRUFBRTtBQUQ0QixDQUEzQixDQUFsQjtBQUlBLE1BQU1DLGdCQUFnQixHQUFHWixJQUFJLENBQUNhLElBQUwsQ0FBVUMsU0FBVixFQUFxQixJQUFyQixFQUEyQixjQUEzQixDQUF6QjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHVixJQUFJLENBQUNDLEdBQUcsQ0FBQ1UsVUFBTCxDQUE5Qjs7QUFFQSxNQUFNQyxZQUFZLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsT0FBaEIsS0FBNEI7QUFDL0NBLEVBQUFBLE9BQU87QUFDTEMsSUFBQUEsR0FBRyxFQUFFckIsRUFBRSxDQUFDc0IsTUFBSCxFQURBO0FBRUxDLElBQUFBLEVBQUUsRUFBRWYsSUFBSSxDQUFDZ0IsRUFBTCxFQUZDO0FBR0xuQixJQUFBQSxJQUFJLEVBQUU7QUFBRW9CLE1BQUFBLElBQUksRUFBRTtBQUFSLEtBSEQ7QUFJTEMsSUFBQUEsUUFBUSxFQUFFYjtBQUpMLEtBS0ZPLE9BTEUsQ0FBUDtBQU9BbEIsRUFBQUEsS0FBSyxDQUFDLFNBQUQsRUFBWWlCLE9BQVosRUFBcUIsU0FBckIsRUFBZ0NDLE9BQWhDLENBQUw7QUFFQSxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFDRSxNQUFNLElBQUlRLEtBQUosQ0FBVSw4QkFBVixDQUFOO0FBRUYsUUFBTUMsR0FBRyxHQUFHLE1BQU1sQixTQUFTLENBQUNtQixRQUFWLENBQW1CVixPQUFuQixDQUFsQjtBQUVBUyxFQUFBQSxHQUFHLENBQUNULE9BQUosR0FBY1csSUFBSSxDQUFDQyxLQUFMLENBQVdILEdBQUcsQ0FBQ1QsT0FBZixDQUFkO0FBRUEsUUFBTWEsSUFBSSxHQUFHLE1BQU1oQixpQkFBaUIsQ0FDbENJLE9BQU8sQ0FBQ00sUUFEMEIsRUFFbENPLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTixHQUFHLENBQUNULE9BQWxCLEVBQTJCO0FBQ3pCZ0IsSUFBQUEsS0FBSyxFQUFFLElBRGtCO0FBRXpCQyxJQUFBQSxNQUFNLEVBQUUsSUFGaUI7QUFHekJqQyxJQUFBQTtBQUh5QixHQUEzQixDQUZrQyxDQUFwQztBQVNBLFFBQU1rQyxRQUFRLEdBQUksR0FBRWpCLE9BQU8sQ0FBQ0MsR0FBSSxJQUFHRCxPQUFPLENBQUNHLEVBQUcsT0FBOUM7QUFDQXJCLEVBQUFBLEtBQUssQ0FBQyxVQUFELEVBQWFtQyxRQUFiLENBQUw7QUFDQSxRQUFNNUIsU0FBUyxDQUFDNEIsUUFBRCxFQUFXTCxJQUFYLENBQWY7QUFFQSxNQUFJWixPQUFPLENBQUNmLElBQVosRUFBa0IsTUFBTUEsSUFBSSxDQUFDZ0MsUUFBRCxFQUFXakIsT0FBTyxDQUFDZixJQUFuQixDQUFWO0FBRWxCLFNBQVEsVUFBU2dDLFFBQVMsRUFBMUI7QUFDRCxDQWpDRDs7QUFtQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLFlBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgncHJldmlldy1lbWFpbCcpO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5jb25zdCBub2RlbWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xuY29uc3Qgb3BlbiA9IHJlcXVpcmUoJ29wZW4nKTtcbmNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5Jyk7XG5jb25zdCBwdWcgPSByZXF1aXJlKCdwdWcnKTtcbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJyk7XG5cbmNvbnN0IHdyaXRlRmlsZSA9IHBpZnkoZnMud3JpdGVGaWxlKTtcblxuY29uc3QgdHJhbnNwb3J0ID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICBqc29uVHJhbnNwb3J0OiB0cnVlXG59KTtcblxuY29uc3QgdGVtcGxhdGVGaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICd0ZW1wbGF0ZS5wdWcnKTtcblxuY29uc3QgcmVuZGVyRmlsZVByb21pc2UgPSBwaWZ5KHB1Zy5yZW5kZXJGaWxlKTtcblxuY29uc3QgcHJldmlld0VtYWlsID0gYXN5bmMgKG1lc3NhZ2UsIG9wdGlvbnMpID0+IHtcbiAgb3B0aW9ucyA9IHtcbiAgICBkaXI6IG9zLnRtcGRpcigpLFxuICAgIGlkOiB1dWlkLnY0KCksXG4gICAgb3BlbjogeyB3YWl0OiBmYWxzZSB9LFxuICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZUZpbGVQYXRoLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgZGVidWcoJ21lc3NhZ2UnLCBtZXNzYWdlLCAnb3B0aW9ucycsIG9wdGlvbnMpO1xuXG4gIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gJ29iamVjdCcpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG5cbiAgY29uc3QgcmVzID0gYXdhaXQgdHJhbnNwb3J0LnNlbmRNYWlsKG1lc3NhZ2UpO1xuXG4gIHJlcy5tZXNzYWdlID0gSlNPTi5wYXJzZShyZXMubWVzc2FnZSk7XG5cbiAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlckZpbGVQcm9taXNlKFxuICAgIG9wdGlvbnMudGVtcGxhdGUsXG4gICAgT2JqZWN0LmFzc2lnbihyZXMubWVzc2FnZSwge1xuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICBwcmV0dHk6IHRydWUsXG4gICAgICBtb21lbnRcbiAgICB9KVxuICApO1xuXG4gIGNvbnN0IGZpbGVQYXRoID0gYCR7b3B0aW9ucy5kaXJ9LyR7b3B0aW9ucy5pZH0uaHRtbGA7XG4gIGRlYnVnKCdmaWxlUGF0aCcsIGZpbGVQYXRoKTtcbiAgYXdhaXQgd3JpdGVGaWxlKGZpbGVQYXRoLCBodG1sKTtcblxuICBpZiAob3B0aW9ucy5vcGVuKSBhd2FpdCBvcGVuKGZpbGVQYXRoLCBvcHRpb25zLm9wZW4pO1xuXG4gIHJldHVybiBgZmlsZTovLyR7ZmlsZVBhdGh9YDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcHJldmlld0VtYWlsO1xuIl19